namespace Sovor.Crypto
{
    using System;
    using System.IO;
    using System.Security.Cryptography;
    using System.Runtime.InteropServices;

    public class FileEncryptionService
    {
        private const int _saltSizeBytes = 32;
        private const int _IVSizeBytes = 16;
        private const int _PBKDF2Iterations = 10000;

        public void EncryptFile(string inputFilename, string password)
        {
            using (var aesManaged = new AesManaged())
            {
                //Set ciphermode for the AES algoritm (CBC, cipher block chaining, by default)
                aesManaged.Mode = CipherMode.CBC;

                //Generate initialization vector, IV is 16 bytes (128 bits) long 
                aesManaged.GenerateIV();

                //Generate a random salt
                byte[] salt = GenerateRandomSalt();

                //Generate a 256 bits key using the password and the salt
                aesManaged.Key = GenerateKey(password, salt);

                byte[] buffer = new byte[1024 * 1024];
                int read;

                using (var fsIn = new FileStream(inputFilename, FileMode.Open))
                using (var outputFileStream = new FileStream(inputFilename + ".aes", FileMode.Create))
                {
                    //Append salt to filestream
                    outputFileStream.Write(salt, 0, salt.Length);

                    //Append initialization vector to filestream
                    outputFileStream.Write(aesManaged.IV, 0, aesManaged.IV.Length);

                    //Link the filestream to a Cryptostream(which handles cryptographic transformations, such as AES).
                    using (var cryptoStream = new CryptoStream(outputFileStream, aesManaged.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        while ((read = fsIn.Read(buffer, 0, buffer.Length)) > 0)
                        {
                            // Application.DoEvents(); // -> for responsive GUI, using Task will be better!
                            cryptoStream.Write(buffer, 0, read);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Decrypts an encrypted file with the FileEncrypt method through its path and the plain password.
        /// </summary>
        /// <param name="inputFile"></param>
        /// <param name="outputFile"></param>
        /// <param name="password"></param>
        public void FileDecrypt(string inputFile, string outputFile, string password)
        {
            using (var aesManaged = new AesManaged())
            using (var fsIn = new FileStream(inputFile, FileMode.Open))
            {
                byte[] salt = GetSaltFromCiphertext(fsIn);
                byte[] initializationVector = GetInitializationVectorFromCiphertext(fsIn);

                aesManaged.Mode = CipherMode.CBC;
                aesManaged.Key = GenerateKey(password, salt);
                aesManaged.IV = initializationVector;

                using (var cryptoStream = new CryptoStream(fsIn, aesManaged.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    using (var fsOut = new FileStream(outputFile, FileMode.Create))
                    {
                        int read;
                        var buffer = new byte[1024 * 1024];

                        try
                        {
                            while ((read = cryptoStream.Read(buffer, 0, buffer.Length)) > 0)
                            {
                                // Application.DoEvents();
                                fsOut.Write(buffer, 0, read);
                            }
                        }
                        catch (CryptographicException ex_CryptographicException)
                        {
                            Console.WriteLine("CryptographicException error: " + ex_CryptographicException.Message);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Error: " + ex.Message);
                        }
                    }
                }
            }
        }

        // Call this function to remove the key from memory after use for security
        [DllImport("KERNEL32.DLL", EntryPoint = "RtlZeroMemory")]
        public static extern bool ZeroMemory(IntPtr Destination, int Length);

        /// <summary>
        /// Creates a random salt that will be used to encrypt your file. This method is required on FileEncrypt.
        /// </summary>
        /// <returns></returns>
        private static byte[] GenerateRandomSalt()
        {
            var data = new byte[32];

            var rng = new RNGCryptoServiceProvider();
            for (var i = 0; i < 10; i++)
            {
                // Fille the buffer with the generated data
                rng.GetBytes(data);
            }

            return data;
        }

        /// <summary>
        /// Generates a 256 bits symmetric encryption key using the PBKDF2 algorithm
        /// </summary>
        /// <param name="password">Password used to lock and unlock te file</param>
        /// <param name="salt">Random salt to prevent rainbow table hash cracking</param>
        /// <returns>An array of bytes representing the 256 bits key</returns>
        private byte[] GenerateKey(string password, byte[] salt)
        {
            //Use password derivation function PBKDF2 with 10.000 iterations (1000 is default)
            //And a salt.
            var rfc = new Rfc2898DeriveBytes(password, salt, _PBKDF2Iterations);

            //Get 32 bytes (256 bits) from the derived key. A 256 bits key is required for AES.
            byte[] key = rfc.GetBytes(32);

            return key;
        }

        private byte[] GetSaltFromCiphertext(FileStream stream)
        {
            var salt = new byte[_saltSizeBytes];
            stream.Read(salt, 0, _saltSizeBytes);
            return salt;
        }

        private byte[] GetInitializationVectorFromCiphertext(FileStream stream)
        {
            var IV = new byte[_IVSizeBytes];
            stream.Read(IV, 0, _IVSizeBytes);
            return IV;
        }
    }
}
